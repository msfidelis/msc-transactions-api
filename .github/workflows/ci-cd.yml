name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.25'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job de Linting e Formata√ß√£o
  lint:
    name: üîç Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Format check
        run: |
          gofmt -l .
          if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
            echo "‚ùå Code is not formatted. Run 'go fmt ./...'"
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run golangci-lint
        run: $(go env GOPATH)/bin/golangci-lint run --timeout=5m

  # Job de Testes Unit√°rios
  test:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests with coverage
        run: |
          go test -v -race -covermode=atomic -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Check test coverage
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "‚ùå Coverage is below 70%"
            # exit 1
          fi
          echo "‚úÖ Coverage is acceptable: ${COVERAGE}%"

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

  # # Job de Benchmarks
  # benchmark:
  #   name: üìä Benchmarks
  #   runs-on: ubuntu-latest
  #   needs: lint
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: ${{ env.GO_VERSION }}

  #     - name: Cache Go modules
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/go/pkg/mod
  #         key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #         restore-keys: |
  #           ${{ runner.os }}-go-

  #     - name: Install dependencies
  #       run: go mod download

  #     - name: Run benchmarks
  #       run: |
  #         go test -bench=. -benchmem -count=3 ./... > benchmark.txt
  #         cat benchmark.txt

  #     - name: Upload benchmark results
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: benchmark-results
  #         path: benchmark.txt

  # Job de Seguran√ßa
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: gosec-report.json

  # Job de Build
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    needs: [test, security]
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          BINARY_NAME="shard-router-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          CGO_ENABLED=0 go build -a -installsuffix cgo -ldflags="-w -s" -o "dist/${BINARY_NAME}" .
          echo "Built: dist/${BINARY_NAME}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/

  # Job de Docker Build
  docker:
    name: üê≥ Docker Build
    runs-on: ubuntu-latest
    needs: [test, security]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job de Testes de Integra√ß√£o
  integration-test:
    name: üîÑ Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    services:
      nginx1:
        image: nginx:alpine
        ports:
          - 8081:80
      nginx2:
        image: nginx:alpine
        ports:
          - 8082:80
      nginx3:
        image: nginx:alpine
        ports:
          - 8083:80
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries-linux-amd64
          path: dist/

      - name: Make binary executable
        run: chmod +x dist/shard-router-linux-amd64

      - name: Run integration tests
        run: |
          # Start the application in background
          export ROUTER_PORT=9090
          export SHARDING_KEY=id_client
          export SHARD_01_URL=http://localhost:8081
          export SHARD_02_URL=http://localhost:8082
          export SHARD_03_URL=http://localhost:8083
          
          ./dist/shard-router-linux-amd64 &
          APP_PID=$!
          
          # Wait for app to start
          sleep 5
          
          # Test health check
          curl -f http://localhost:9090/healthz || exit 1
          
          # Test routing
          curl -H "id_client: test123" http://localhost:9090/ || true
          
          # Test metrics
          curl -f http://localhost:9090/metrics | grep -q "shard_router" || exit 1
          
          # Cleanup
          kill $APP_PID

  # Job de Release (apenas em tags)
  release:
    name: üöÄ Release
    runs-on: ubuntu-latest
    needs: [build, docker, integration-test]
    if: github.event_name == 'release'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release archives
        run: |
          mkdir -p release
          for dir in binaries-*; do
            if [ -d "$dir" ]; then
              cd "$dir"
              tar -czf "../release/${dir}.tar.gz" *
              cd ..
            fi
          done

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          generate_release_notes: true

  # Job de Notifica√ß√µes
  notify:
    name: üì¢ Notify
    runs-on: ubuntu-latest
    needs: [test, security, build, docker]
    if: always()
    steps:
      - name: Notify on success
        if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
        run: |
          echo "‚úÖ Pipeline executada com sucesso!"
          echo "- Testes: ‚úÖ"
          echo "- Build: ‚úÖ"
          echo "- Docker: ‚úÖ"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Pipeline falhou!"
          echo "Verifique os logs para mais detalhes."